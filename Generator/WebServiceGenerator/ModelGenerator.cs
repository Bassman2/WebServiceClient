using Microsoft.CodeAnalysis;
using System.Text;
using WebServiceGenerator.GeneratorLibrary;

namespace WebServiceGenerator
{
    [Generator]
    public class ModelGenerator : Generator
    {
        public override void Excecute()
        {
            Debug();

            foreach (var cl in GetAllClassesWithAttribute("WebServiceClient.Attributes.ModelAttribute"))
            {
                string className = cl.Name.Replace("Model", "");

                StringBuilder sb = new();
                sb.AppendLine("// <auto-generated />");
                sb.AppendLine();
                sb.AppendLine("namespace Test;");
                sb.AppendLine();
                sb.AppendLine($"public partial class {className}");
                sb.AppendLine("{");
                sb.AppendLine("}");

                AddSource($"{className}.g.cs", sb.ToString());
            }
        }

        private void Debug()
        {
            StringBuilder sb = new();
            sb.AppendLine("//##############################################################");

            //foreach (var cl in GetAllClasses())

            Debug(sb, this);

            foreach (var cl in GetAllClassesWithAttribute("WebServiceClient.Attributes.ModelAttribute"))
            {
                sb.AppendLine();
                sb.AppendLine($"// Class: {cl}");

                foreach (var prop in cl.Properties)
                {
                    sb.AppendLine($"//   Property: {prop.TypeName} {prop.Name} {{ {(prop.HasGet ? "get; " : "")}{(prop.HasSet ? "set;" : "")} }}");

                    Debug(sb, prop);

                    //foreach (var attr in prop.Attributes)
                    //{
                    //    sb.AppendLine($"//     Attribute: {attr.Name} - {attr.NameSpace} - {attr.NameWithNameSpace}");

                    //    foreach (var arg in attr.ConstructorArguments)
                    //    {
                    //        sb.AppendLine($"//        {arg}");
                    //    }
                    //    foreach (var arg in attr.NamedArguments)
                    //    {
                    //        sb.AppendLine($"//        {arg}");
                    //    }
                    //}
                }

                Debug(sb, cl);

                //foreach (var attr in cl.Attributes)
                //{
                //    sb.AppendLine($"//   Attribute: {attr.Name} - {attr.NameSpace} - {attr.NameWithNameSpace}");

                //    foreach (var arg in attr.ConstructorArguments)
                //    {
                //        sb.AppendLine($"//      {arg}");
                //    }
                //    foreach (var arg in attr.NamedArguments)
                //    {
                //        sb.AppendLine($"//      {arg}");
                //    }
                //}
            }
            AddSource($"Debug.g.cs", sb.ToString());
        }

        private void Debug(StringBuilder sb, BaseAttributes attributes)
        {
            foreach (var attr in attributes.Attributes)
            {
                sb.AppendLine($"//     Attribute: {attr.Name} - {attr.NameSpace} - {attr.NameWithNameSpace}");

                foreach (var arg in attr.ConstructorArguments)
                {
                    sb.AppendLine($"//        {arg}");
                }
                foreach (var arg in attr.NamedArguments)
                {
                    sb.AppendLine($"//        {arg}");
                }
            }
        }
    }
}
    
