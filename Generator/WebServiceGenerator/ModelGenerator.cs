using Microsoft.CodeAnalysis;
using System.Diagnostics.Contracts;
using System.Reflection.Metadata;
using System.Text;
using WebServiceGenerator.GeneratorLibrary;

namespace WebServiceGenerator
{
    [Generator]
    public class ModelGenerator : Generator
    {
        public override void Excecute()
        {
            //Debugger.Launch();

            // for debug only
            CreateDebug();

            // get all classes with [Model] 
            foreach (var cl in GetAllClassesWithAttribute("WebServiceClient.Attributes.ModelAttribute"))
            {
                CreateModelFile(cl);
                CreateCastFile(cl);
            }
        }

        private void CreateModelFile(Class cl)
        {
            StringBuilder sb = new(
                $$"""
                // <auto-generated />

                #nullable enable annotations
                #nullable disable warnings

                // Suppress warnings about [Obsolete] member usage in generated code.
                #pragma warning disable CS0612, CS0618

                namespace {{cl.NameSpace}}.Model;
                    
                internal partial class {{cl.Name}}ModelTest
                {
                """);

            foreach (var prop in cl.Properties)
            {
                string jsonName = LowercaseFirst(prop.Name);
                string typeName = TypeName(prop.Type);
                string propName = prop.Name;
               
                sb.AppendLine(
                    $$"""

                        [JsonPropertyName("{{jsonName}}")]
                        public {{typeName}} {{propName}} { get; set; }
                    """);
            }

            sb.AppendLine("}");
            AddSource($"{cl.Name}ModelTest.g.cs", sb.ToString());
        }

        private void CreateCastFile(Class cl)
        {
            StringBuilder sb = new(
                $$"""
                // <auto-generated />

                #nullable enable annotations
                #nullable disable warnings
                
                // Suppress warnings about [Obsolete] member usage in generated code.
                #pragma warning disable CS0612, CS0618

                namespace {{cl.NameSpace}}.Model;
                    
                internal static class {{cl.Name}}Cast
                {
                    public static {{cl.Name}} CastTo(this {{cl.Name}}Model model)
                    {
                        return new {{cl.Name}}()
                        {

                """);

            foreach (var prop in cl.Properties)
            {
                if (IsLocal(prop.Type))
                {
                    sb.AppendLine($"            {prop.Name} = model.{prop.Name}?.CastTo(),");
                }
                else
                {                    
                    sb.AppendLine($"            {prop.Name} = model.{prop.Name},"); 
                }
            }
                
            sb.AppendLine(
                $$"""
                        };
                    }
                    
                    public static {{cl.Name}}Model CastFrom(this {{cl.Name}} item)
                    {
                        return new {{cl.Name}}Model()
                        {
                """);

            foreach (var prop in cl.Properties)
            {
                if (IsLocal(prop.Type))
                {
                    sb.AppendLine($"            {prop.Name} = item.{prop.Name}?.CastFrom(),");
                }
                else
                {
                    sb.AppendLine($"            {prop.Name} = item.{prop.Name},");
                }
            }
            
            sb.AppendLine(
                $$"""
                        };
                    }
                """);
            

            sb.AppendLine("}");
            AddSource($"{cl.Name}Cast.g.cs", sb.ToString());
        }


        private string LowercaseFirst(string input)
        {
            if (string.IsNullOrEmpty(input) || char.IsLower(input[0]))
                return input;
            return char.ToLower(input[0]) + input.Substring(1);
        }

        private string TypeName(TypeSym type)
        {
            return type.FullName switch
            {
                "bool" => "bool",
                "bool?" => "bool?",
                "int" => "int",
                "int?" => "int?",
                "string" => "string",
                "string?" => "string?",
                "System.DateTime" => "System.DateTime",
                "System.DateTime?" => "System.DateTime?",
                _ => $"{type.Name}Model?"
            };


        }

        private bool IsLocal(TypeSym type)
        {
            return type.FullName switch
            {
                "bool" => false,
                "bool?" => false,
                "int" => false,
                "int?" => false,
                "string" => false,
                "string?" => false,
                "System.DateTime" => false,
                "System.DateTime?" => false,
                _ => true
            };
        }
    }
}
    
